#!/usr/bin/env bash
# Run a Unity compiled Oculus Quest app using adb.
# 	= config files in ~ & .
# 	- Captures log.
# ADB docs: https://developer.android.com/studio/command-line/adb

CONFIGFILE=.uquest
LOGFILE=adblog.txt
BUILDLOG=Build.log # Unity build output log
UNITY_ADB_PATH=Editor/Data/PlaybackEngines/AndroidPlayer/SDK/platform-tools/adb
ADB_HOW=Unset

# package.apk path
APK=
# com.vendor.app package name
PACKAGE=
# path of adb to use
ADB=

usage () {
	colecho -white "  $(basename $0) [-hbsiulrc] [PACKAGE.apk]"
	cat <<EOM
 
	-h          help
	-i [APK]    install package to device
	-u PKG      uninstall package from device
	-r PKG      run package app on device
	--list      list installed packages
	-l [OPTS]   capture app log output in $LOGFILE
	              all   show all output
	-c CMDS     call ADB with the given commands

	--bare      start Baretail following the log
	--side      use SideQuest ADB

	e.g. run & log:	uquest -r -l

	ADB docs: https://developer.android.com/studio/command-line/adb
EOM
}

if [ ! -f ~/$CONFIGFILE ]; then
	cat > ~/$CONFIGFILE <<EOM
# uquest config file - change these values as appropriate for your environment

# Where Unity installs go
#UNITY_INSTALL=/cygdrive/c/Unity

# Default Unity version to use
#UNITY_PATH=UNITY_INSTALL/2019.4.25f

# Global ADB path to use.
#ADB_PATH=
EOM
fi

if [ ! -f ./$CONFIGFILE ]; then
	cat > ./$CONFIGFILE <<EOM
# uquest config file - change these values as appropriate for your environment

# Unity install to use
#UNITY_PATH=$UNITY_INSTALL/2019.4.25f

# ADB path to use. If blacnk & UNITY_PATH set, uses Unity adb.
#ADB_PATH=

# APK=
# PACKAGE=
EOM
fi

source ~/$CONFIGFILE
source ./$CONFIGFILE

ADB=$ADB_PATH
ADB_HOW="From $CONFIGFILE config"

# Work out path to adb
if [ -z $ADB ]; then
	#colecho -cyan "ADB_PATH unset. Trying to determine path."
	if [ -z $UNITY_PATH ]; then
		colecho -red "UNITY_PATH not set in .uquest config"
	else
		if [ ! -d $UNITY_PATH ]; then
			colecho -red "No Unity install at UNITY_PATH=$UNITY_PATH"
			exit 1
		fi
		if [ -x $UNITY_PATH/$UNITY_ADB_PATH ]; then
			ADB=$UNITY_PATH/$UNITY_ADB_PATH
			ADB_HOW="From Unity: $UNITY_PATH"
		fi
	fi

	if [ -z $ADB ]; then
		if [ -f $BUILDLOG ]; then
			# Find the adb path specified in the log and get the path.
			# Also strip off Windows CR line ending \r
			LOG_ADB=$(grep '^\sadb' $BUILDLOG | sed 's/adb\s*:\s*//' | sed 's/\r//')
			if [ ! -z $LOG_ADB ]; then
				ADB=$(cygpath -u "$LOG_ADB")
				ADB_HOW="From $BUILDLOG"
				echo "adb found in $BUILDLOG: $ADB"
			else
				echo "adb not found in $BUILDLOG"
			fi
		fi
	fi
fi

if [ -z $ADB ]; then
	colecho -red "Error: could not find ADB in $CONFIGFILE or $BUILDLOG"
	exit 1
fi

function get_package ()
{
	local PKG=${1/.apk/}  # strip postfix
	if [ -z $PKG ] || [ ! -f $PKG.apk ]; then
		echo "Error: Package $PCK.apk not found" >&2
	fi
	echo $PKG
}

while [ $# -ne 0 ]; do
	case "$1" in
	-h|--help)
		usage
		echo
		colecho -yellow "    UNITY_INSTALL=" -grey "${UNITY_INSTALL:-"*unset*"}"
		colecho -yellow "    UNITY_PATH=" -grey "${UNITY_PATH:-"*unset*"}"
		colecho -yellow "    ADB=" -grey "${ADB:-"*not found*"}"
		colecho -yellow "    Adb found: " -grey "$ADB_HOW"
		colecho -yellow "    APK=" -grey "${APK:-"*unset*"}"
		colecho -yellow "    PACKAGE=" -grey "${PACKAGE:-"*unset*"}"
		shift
		;;
	-i|--install)
		$ADB devices
		PKG=$APK
		if [ -z $PKG ] || [ ! -f $PKG ]; then
			colecho -red "Error: Package $PKG not found" >&2
		fi
		echo "Stopping $PACKAGE"
		$ADB shell am force-stop $PACKAGE
		echo "Installing $PKG"
		$ADB install -r $PKG
		shift
		;;
	-u|--uninstall)
		echo "Stopping $PACKAGE"
		$ADB shell am force-stop $PACKAGE
		echo "Uninstalling $PACKAGE..."
		$ADB uninstall $PACKAGE
		shift
		;;
	-r|--run)
		echo "Running $PACKAGE..."
		echo "Stopping existing package"
		$ADB shell am force-stop $PACKAGE
		sleep 1
		echo "Starting new instance of package"
		$ADB shell am start -n $PACKAGE/com.unity3d.player.UnityPlayerActivity
		shift
		;;
	--list)
		# show 3rd party packages installed
		$ADB shell pm list packages -3
		shift
		;;
	-c|--cmd)
		# user command
		shift
		$ADB $*
		break
		;;
	-l|--log)
		echo "Capture log"
		shift
		OPTS="Unity:V OVRPlatform:D *:S" # Just Unity & some platform messages
		while [ $# -ne 0 ]; do
			case $1 in
			all) OPTS="" ;; # no filters
			-*) break ;;
			*) echoecho -red "Unrecognised arg for log: $1"
			esac
			shift
		done
		$ADB logcat "$OPTS" > $LOGFILE
		;;
	--side)
	  	ADB=$(cygpath -u "$HOMEPATH\AppData\Roaming\SideQuest\platform-tools\adb.exe")
		echo "Use SideQuest ADB"
		shift
		;;
	--bare)	
		if ! $(command_exists baretail); then
			colecho -red "Error: Baretail is not in the path."
			exit 1
		fi
		echo "Starting Baretail..."
		exec baretail $(cygpath -w $LOGFILE) &  # https://baremetalsoft.com/baretail/
		shift
		;;
	*) 	
		colecho -red "Unknown option: $1" >&2
	  	exit 2
	  	;;
	esac
done

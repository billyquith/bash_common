#!/usr/bin/env bash
# Android application support for Unity
# 	= config files in ~ & .
# 	- Captures log.
# ADB docs: https://developer.android.com/studio/command-line/adb

CONFIGFILE=.uadb
HOMECONFIG=~/$CONFIGFILE
LOCALCONFIG=./$CONFIGFILE
LOGFILE=adblog.txt
BUILDLOG=Build.log # Unity build output log
UNITY_ADB_PATH=Editor/Data/PlaybackEngines/AndroidPlayer/SDK/platform-tools/adb
ADB_HOW=Unset

# package.apk path
APK=
# com.vendor.app package name
PACKAGE=
# path of adb to use
ADB=
# activity to run the package
ACTIVITY=
# logcat filter
LOGOPTS=all


usage () {
	colecho -white "  $(basename $0) [-c CONFIG] [-hbsiulr]"
	cat <<EOM
	loads .uadb_CONFIG file and runs command.
	APK, packaged, Unity build are specified in config.
	Use multiple configs for diffent apps and devices.
 
	-h          help
	-i          install package to device
	-u          uninstall package from device
	-r          run package app on device
	-l [OPTS]   capture app log output in $LOGFILE
	              all   show all output
	--cmd CMDS  call ADB with the given commands

	--list      list installed packages
	--dump      dump installed package info
	--act       get run activity for package

	--bare      start Baretail following the log
	--side      use SideQuest ADB

	e.g. run & log:	uadb -r -l

	ADB docs: https://developer.android.com/studio/command-line/adb
EOM
}

# -c NAME  -- use a config name
if [ $1 = -c ]; then
	shift
	if [[ $1 == -* ]]; then
		colecho -red "Error: no config given"; exit 1
	else
		LOCALCONFIG=${LOCALCONFIG}_$1
		shift
	fi
fi

if [ ! -f $HOMECONFIG ]; then
	echo "Creating $HOMECONFIG"
	cat > $HOMECONFIG <<EOM
# uadb config file - change these values as appropriate for your environment

# Where Unity installs go
#UNITY_INSTALL=/cygdrive/c/Unity

# Default Unity version to use
#UNITY_PATH=$UNITY_INSTALL/2020.3.22f1

# Global ADB path to use.
#ADB=
EOM
fi

if [ ! -f $LOCALCONFIG ]; then
	echo "Creating $LOCALCONFIG"
	cat > $LOCALCONFIG <<EOM
# uadb config file - change these values as appropriate for your environment

# Unity install to use
#UNITY_PATH=$UNITY_INSTALL/2019.4.25f1

# ADB path to use. If blank & UNITY_PATH set, uses Unity adb.
#ADB=

# APK package to use, eg. com.company.app.apk
#APK=

# Package, if different from APK, eg. com.company.myapp
#PACKAGE=

# eg. com.unity3d.player.UnityPlayerActivity
ACTIVITY=

# eg. OVR  LOGOPTS="Unity:V OVRPlatform:D *:S"
#	  Wave LOGOPTS="Unity:V VRCORE:D *:S"
LOGOPTS=

EOM
fi

source $HOMECONFIG
source $LOCALCONFIG

ADB=$ADB_PATH
ADB_HOW="From $CONFIGFILE config"

# Work out path to adb
if [ -z $ADB ]; then
	#colecho -cyan "ADB_PATH unset. Trying to determine path."
	if [ -z $UNITY_PATH ]; then
		colecho -red "UNITY_PATH not set in $CONFIGFILE config"
	else
		if [ ! -d $UNITY_PATH ]; then
			colecho -red "No Unity install at UNITY_PATH=$UNITY_PATH"
			exit 1
		fi
		if [ -x $UNITY_PATH/$UNITY_ADB_PATH ]; then
			ADB=$UNITY_PATH/$UNITY_ADB_PATH
			ADB_HOW="From Unity: $UNITY_PATH"
		fi
	fi

	if [ -z $ADB ]; then
		if [ -f $BUILDLOG ]; then
			# Find the adb path specified in the log and get the path.
			# Also strip off Windows CR line ending \r
			LOG_ADB=$(grep '^\sadb' $BUILDLOG | sed 's/adb\s*:\s*//' | sed 's/\r//')
			if [ ! -z $LOG_ADB ]; then
				ADB=$(cygpath -u "$LOG_ADB")
				ADB_HOW="From $BUILDLOG"
				echo "adb found in $BUILDLOG: $ADB"
			else
				echo "adb not found in $BUILDLOG"
			fi
		fi
	fi
fi

if [ -z $ADB ]; then
	colecho -red "Error: could not find ADB in $CONFIGFILE or $BUILDLOG"
	exit 1
fi

function get_package ()
{
	local PKG=${1/.apk/}  # strip postfix
	if [ -z $PKG ] || [ ! -f $PKG.apk ]; then
		echo "Error: Package $PCK.apk not found" >&2
	fi
	echo $PKG
}

while [ $# -ne 0 ]; do
	case "$1" in
	-h|--help)
		usage
		echo
		colecho -cyan   "    CONFIG=" -grey "$HOMECONFIG / $LOCALCONFIG"
		colecho -yellow "    UNITY_INSTALL=" -grey "${UNITY_INSTALL:-"*unset*"}"
		colecho -yellow "    UNITY_PATH=" -grey "${UNITY_PATH:-"*unset*"}"
		colecho -yellow "    ADB=" -grey "${ADB:-"*not found*"}"
		colecho -yellow "    Adb found: " -grey "$ADB_HOW"
		colecho -yellow "    APK=" -grey "${APK:-"*unset*"}"
		colecho -yellow "    PACKAGE=" -grey "${PACKAGE:-"*unset*"}"
		colecho -yellow "    ACTIVITY=" -grey "${ACTIVITY:-"*unset*"}"
		shift
		;;
	-i|--install)
		$ADB devices
		shift
		if [ -z $APK ] || [ ! -f $APK ]; then
			colecho -red "Error: Package $APK not found" >&2
			exit 1
		fi
		if [[ -z $PACKAGE ]]; then
			PACKAGE=$(get_package $APK)
		fi
		echo "Stopping $PACKAGE"
		$ADB shell am force-stop $PACKAGE
		echo "Installing $APK"
		$ADB install -r $APK
		;;
	-u|--uninstall)
		echo "Stopping $PACKAGE"
		$ADB shell am force-stop $PACKAGE
		echo "Uninstalling $PACKAGE..."
		$ADB uninstall $PACKAGE
		shift
		;;
	-r|--run)
		colecho -purple "Running $PACKAGE/$ACTIVITY..."
		# echo "Stopping existing package"
		$ADB shell am force-stop $PACKAGE
		sleep 1
		# adb intent: https://developer.android.com/studio/command-line/adb#IntentSpec
		#INTENT=android.intent.action.MAIN
		#colecho -purple "Starting intent $INTENT"
		#$ADB shell am start -a $INTENT
		$ADB shell am start $PACKAGE/$ACTIVITY
		shift
		;;
	--list)
		# show 3rd party packages installed
		colecho -yellow "Packages"
		$ADB shell pm list packages -3
		shift
		;;
	--dump)
		# dump all package info
		$ADB shell pm dump $PACKAGE
		shift
		;;
	--act)
		colecho -yellow "Activity in installed package $PACKAGE:"
		# Get the launcher activity https://stackoverflow.com/a/41325792/3233
		$ADB shell "cmd package resolve-activity --brief $PACKAGE | tail -n 1"
		shift
		;;
	--cmd)
		# user command
		shift
		$ADB $*
		break
		;;
	-l|--log)
		shift
		OPTS="$LOGOPTS"
		while [ $# -ne 0 ]; do
			case $1 in
			all) OPTS="" ;; # no filters
			-*) break ;;
			*) OPTS="$OPTS $1"
			esac
			shift
		done
		echo "Capture log ($OPTS)"
		rm $LOGFILE
		$ADB logcat "$OPTS" > $LOGFILE
		;;
	--side)
	  	ADB=$(cygpath -u "$HOMEPATH\AppData\Roaming\SideQuest\platform-tools\adb.exe")
		echo "Use SideQuest ADB"
		shift
		;;
	--bare)	
		if ! $(command_exists baretail); then
			colecho -red "Error: Baretail is not in the path."
			exit 1
		fi
		echo "Starting Baretail..."
		exec baretail $(cygpath -w $LOGFILE) &  # https://baremetalsoft.com/baretail/
		shift
		;;
	*) 	
		colecho -red "Unknown option: $1" >&2
	  	exit 2
	  	;;
	esac
done
